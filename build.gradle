/*
 * Copyright (C) 2019 by Saverio Giallorenzo <saverio.giallorenzo@gmail.com>
 * Copyright (C) 2019 by Fabrizio Montesi <famontesi@gmail.com>
 * Copyright (C) 2019 by Marco Peressotti <marco.peressotti@gmail.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Library General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this program; if not, write to the
 * Free Software Foundation, Inc.,
 * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

buildscript {
	repositories {
		mavenCentral()
	}
}

apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'antlr'
apply plugin: 'application'

sourceCompatibility = 14
targetCompatibility = 14

mainClassName = 'choral.compiler.Compiler'
def jarOutputFolder = "dist"

configurations {
	choral.extendsFrom antlr
	implementation.extendsFrom choral
	runtime.extendsFrom choral
	choralUnit
	choralRuntime.extendsFrom choralUnit
	runtime.extendsFrom choralRuntime
	runtime.extendsFrom compare
}


dependencies {
	implementation 'junit:junit:4.12'
	// choral dependencies
	antlr "org.antlr:antlr4:4.5.3"
	choral "org.apache.velocity:velocity:1.7"
	choral "commons-cli:commons-cli:1.4"
	choral "com.google.guava:guava:28.1-jre"
	choral 'info.picocli:picocli:4.2.0'
	choral 'info.picocli:picocli-codegen:4.2.0'

	// choralUnit dependencies
	choralUnit 'io.github.classgraph:classgraph:4.8.54'

	// runtime dependencies
	choralRuntime 'com.esotericsoftware:kryo:5.0.0-RC4'
	choralRuntime 'com.google.code.gson:gson:2.8.6'

	// compare dependencies
	compare 'com.typesafe.akka:akka-actor-typed_2.13:2.6.9'
}

test {
	useJUnit()

	maxHeapSize = '1G'
}

repositories {
	mavenCentral()
}

sourceSets {
	main {
		java.srcDir 'src/main/java'
		antlr.srcDir 'src/main/antlr'
	}
	base {
		java.srcDir 'src/base/java'
	}
	runtime {
		java.srcDir 'src/runtime/java'
		runtimeClasspath += compileClasspath += sourceSets.main.runtimeClasspath + sourceSets.base.output
	}
	choralUnit {
		java.srcDir 'src/choralUnit/java'
		runtimeClasspath += compileClasspath += sourceSets.main.runtimeClasspath + sourceSets.base.output + sourceSets.runtime.output
	}
	tests {
		java.srcDir 'src/tests/java'
		runtimeClasspath += compileClasspath += sourceSets.main.runtimeClasspath + sourceSets.choralUnit.output + sourceSets.base.output + sourceSets.runtime.output
	}
	compare {
		java.srcDir 'src/compare/java'
		runtimeClasspath += compileClasspath += sourceSets.main.runtimeClasspath
	}
}

gradle.startParameter.showStacktrace = ShowStacktrace.ALWAYS

generateGrammarSource {
	description "Compilation of the Antlr grammar to Java Sources"
	outputDirectory file('src/main/java/choral/grammar')
	arguments += ['-package', 'choral.grammar', "-visitor"]
	doFirst({ println("Starting " + tasks[name].description.toString()) })
	doLast({ println("Done " + tasks[name].description.toString()) })
}

task testParsing( type: JavaExec ){
	classpath = sourceSets.main.runtimeClasspath
	main = 'choral.compiler.DebuggingParser'
}

task compile11( type: JavaCompile ) {
	sourceCompatibility = 11
	targetCompatibility = 11
	classpath = sourceSets.choralUnit.runtimeClasspath
	destinationDir = compileJava.destinationDir
	def sources = layout.files()
	sources += sourceSets.main.java.sourceDirectories
	sources += sourceSets.base.java.sourceDirectories
	sources += sourceSets.runtime.java.sourceDirectories
	sources += sourceSets.choralUnit.java.sourceDirectories
	source = sources
}

task compile14( type: JavaCompile, dependsOn: compile11 ) {
	sourceCompatibility = 14
	targetCompatibility = 14
	classpath = sourceSets.test.runtimeClasspath
	destinationDir = compileJava.destinationDir
	source = sourceSets.tests.java.sourceDirectories
}

task compileAll{
	dependsOn generateGrammarSource
	dependsOn compile11
	dependsOn compile14
}

task runSingle( type: JavaExec, dependsOn: compileAll ) {
	classpath = sourceSets.main.runtimeClasspath
	doFirst({ println("Starting " + tasks[name].description.toString() ) })

	if ( hasProperty('runClassName') ) {
		main = project.properties.get( "runClassName" )
	} else {
		main = mainClassName
	}
}

clean {
	delete += jarOutputFolder
}

jar {
	destinationDirectory = file( jarOutputFolder )
	manifest.attributes 'Main-Class': 'choral.Choral'
	from {
		configurations.choral.collect { it.isDirectory() ? it : zipTree(it) }
	}
}

task jarBase ( type: Jar, dependsOn: compile11 ) {
	manifest {
		attributes "Implementation-Title": "Choral Base Jar Package",
		"Implementation-Version": "0.1"
	}
	archiveBaseName.set( "choral-base" )
	destinationDirectory = file( jarOutputFolder )
	from sourceSets.base.output
}

task jarRuntime ( type: Jar, dependsOn: compile11 ) {
	manifest {
		attributes "Implementation-Title": "Choral Runtime Jar Package",
				"Implementation-Version": "0.1"
	}
	archiveBaseName.set( "choral-runtime" )
	destinationDirectory = file( jarOutputFolder )
	from sourceSets.runtime.output
	from {
		configurations.choralRuntime.collect { it.isDirectory() ? it : zipTree(it) }
	}
}

task jarChoralUnit ( type: Jar, dependsOn: compile11 ) {
	manifest {
		attributes "Implementation-Title": "ChoralUnit Jar Package",
				"Implementation-Version": "0.1"
	}
	archiveBaseName.set( "choral-unit" )
	destinationDirectory = file( jarOutputFolder )
	from sourceSets.choralUnit.output
	from {
		configurations.choralUnit.collect { it.isDirectory() ? it : zipTree(it) }
	}
}

task jarAll {
	dependsOn jar
	dependsOn jarBase
	dependsOn jarRuntime
	dependsOn jarChoralUnit
}

task makeRelease( type: Zip, dependsOn: jarAll ) {
	def destDir = file( jarOutputFolder )
	from ( destDir ) {
		include "*.jar"
		into "choral/dist"
	}
	from ( file( "src/scripts" ) ){
		include "choral"
		into "choral/launchers"
	}
	def props = new Properties()
	file( "src/main/resources/version.properties" ).withInputStream { props.load(it) }
	archiveFileName = "choral-v" + props.getProperty( "choral.version" ) + ".zip"
	destinationDirectory = file( "release" )
}
